name: Air Quality Project Infrastructure Deployment

on: 
  workflow_dispatch:

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - '07-project/airquality/infra/*'

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      TF_VAR_api_host: ${{ secrets.TF_VAR_API_HOST }}
      TF_VAR_magedb_host: ${{ secrets.TF_VAR_MAGEDB_HOST }}
      TF_VAR_magedb_name: ${{ secrets.TF_VAR_MAGEDB_NAME }}
      TF_VAR_magedb_password: ${{ secrets.TF_VAR_MAGEDB_PASSWORD }}
      TF_VAR_magedb_port: ${{ secrets.TF_VAR_MAGEDB_PORT }}
      TF_VAR_magedb_user: ${{ secrets.TF_VAR_MAGEDB_USER }}
      TF_VAR_mage_database_connection_url: ${{ secrets.TF_VAR_MAGE_DATABASE_CONNECTION_URL }}
      TF_VAR_mage_rds_password: ${{ secrets.TF_VAR_MAGE_RDS_PASSWORD }}
      TF_VAR_mage_rds_username: ${{ secrets.TF_VAR_MAGE_RDS_USERNAME }}
      TF_VAR_mlflow_host: ${{ secrets.TF_VAR_MLFLOW_HOST }}
      TF_VAR_mlflow_rds_password: ${{ secrets.TF_VAR_MLFLOW_RDS_PASSWORD }}
      TF_VAR_mlflow_rds_username: ${{ secrets.TF_VAR_MLFLOW_RDS_USERNAME }}
      TF_VAR_openaq_api_key: ${{ secrets.TF_VAR_OPENAQ_API_KEY }}
      TF_VAR_project_prefix: ${{ secrets.TF_VAR_PROJECT_PREFIX }}
      TF_VAR_mlflowdb_dbname: ${{ secrets.TF_VAR_MLFLOWDB_DBNAME }}
      TF_VAR_mlflow_tracking_uri: ${{ secrets.TF_VAR_MLFLOW_TRACKING_URI }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.1

      - name: Terraform Init
        working-directory: ./07-project/airquality/infra
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ secrets.TF_BACKEND_REGION }}" \
            -backend-config="encrypt=true"

      - name: Plan Terraform
        working-directory: ./07-project/airquality/infra
        run: terraform plan

      - name: Apply Terraform
        working-directory: ./07-project/airquality/infra
        run: |
          terraform apply -auto-approve
          echo "MAGE_DB_HOST=$(terraform output -raw mage_db_host)" >> $GITHUB_ENV
          echo "MLFLOW_DB_HOST=$(terraform output -raw mlflow_db_host)" >> $GITHUB_ENV
          echo "SECRET_NAME=$(terraform output -raw secret_name)" >> $GITHUB_ENV

      - name: Fetch current secrets from AWS Secrets Manager
        id: fetch_secrets
        run: |
          current_secrets=$(aws secretsmanager get-secret-value --secret-id $SECRET_NAME --query SecretString --output text)
          echo "current_secrets=$current_secrets" >> $GITHUB_ENV

      - name: Update secrets with the new DB Host and Connection URL
        id: update_secrets
        run: |
          magedb_name=$(echo $current_secrets | jq -r '.MAGEDB_NAME')
          magedb_user=$(echo $current_secrets | jq -r '.MAGEDB_USER')
          magedb_password=$(echo $current_secrets | jq -r '.MAGEDB_PASSWORD')
  
          mage_database_connection_url="postgresql://$magedb_user:$magedb_password@$MAGE_DB_HOST/$magedb_name"
  
          # Create updated secret with new host and connection URL
          # TODO: fix MAGEDB_HOST and MAGE_DB_HOST they should be called the same
          new_secrets=$(echo $current_secrets | \
          jq --arg new_host "$MAGE_DB_HOST" \
             --arg new_url "$mage_database_connection_url" \
             --arg new_mlflow_host "$MLFLOW_DB_HOST" \
             '.MAGEDB_HOST=$new_host | .MAGE_DATABASE_CONNECTION_URL=$new_url | .MLFLOWDB_ENDPOINT=$new_mlflow_host')
  
          #echo "new_secrets=$new_secrets" >> $GITHUB_ENV
          echo "new_secrets=$(echo "$new_secrets" | jq -c)" >> $GITHUB_ENV


      - name: Store updated secrets back to AWS Secrets Manager
        run: |
          aws secretsmanager put-secret-value --secret-id $SECRET_NAME --secret-string "$new_secrets"